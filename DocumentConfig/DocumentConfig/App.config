<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.2" />
  </startup>
  <appSettings>
    <add key="CreateMedicineUrl" value="/config/document/medicine/add"/>
    <add key="GetFirstClassUrl" value="/config/document/firstclass/get"/>
    <add key="GetAllMedicineUrl" value="/config/document/medicine/get"/>
    <add key="CreateFirstClass" value="/config/document/firstclass/add"/>
    <add key="CreateSecordClass" value="/config/document/secondclass/add"/>
    <add key="GetAllSecordClass" value="/config/document/secondclass/get"/>
    <add key="UplondSecordWord" value="/config/document/word/upload/secondclass"/>
    <add key="DownSecordWord" value="/config/document/word/download/secondclass"/>
    <add key="UplondMedicineWord" value="/config/document/word/upload/medicine"/>
    <add key="UplondMedicineEffectWord" value="/config/document/word/effect/medicine"/>
    <add key="DownMedicineWord" value="/config/document/word/download/medicine"/>
    <add key="MedicineVersion" value="/config/document/word/version"/>
    <add key="GetMaxID" value="/config/document/word/getId"/>
    <add key="Uplond" value="/config/document/template/upload"/>
    <add key="ChangeSecordName" value="/config/document/secondclass/update"/>
    <add key="UserName" value="admin"/>
    <add key="Password" value="admin"/>
    <add  key="serverIp" value="192.168.1.25:9000"/>
    <add key="Login" value="/login/login"/>
    <add key="ConfigPath" value="http://192.168.1.125:8080/dist_config"/>
    <add key="jsFuncion1" value="var selectParams=
         {selectId:'',parentId:'',targetItem:''};"/>
    <add key="jsFuncion4" value="var relateList=[];var beforeCfgRelate=[];"/>
    <add key="jsFuncion5" value="var confimInput=[];var timer='';"/>
    <add key="jsFuncion26" value="var isMethodParam=false; "/>
    <add key="jsFunction17" value="var config_input_id = '';"/>
    <add key="jsFunction18" value="var parent_key = '';"/>
    <add key="jsFunction19" value="var methodParamObj = {
			isMethodChooseParam: false,
			targetCode: ''
		}"/>
    <add key="jsFuncion27" value="function addCss(path) {
		if(!path || path.length === 0) {
			throw new Error('argument path is required !');
		}
		var head = document.getElementsByTagName('head')[0];
		var link = document.createElement('link');
		link.href = path;
		link.rel = 'stylesheet';
		link.type = 'text/css';
		head.appendChild(link);
	}; "/>
    <add key="jsFuncion2" value="window.onmessage = function(e) {
	console.log(e.data);
	//保存key，后面会做判断
	if(e.data.parent_key) {
		parent_key = e.data.parent_key;
	}
	//初始化模板，当模板空格已经配置，显示已经配置的状态
	if(e.data.parent_key &amp;&amp; e.data.parent_key === '0') {
		if(e.data.ipAddress) {
			addCss(e.data.ipAddress);
		}
		updataStyleFirst(e.data.configInput);
		confimInput = e.data.configInput;
		return;
	}
	//是否是方法的参数选择
	if(e.data.parent_key &amp;&amp; e.data.parent_key === '5') {
		isMethodParam = true;
		//methodParamSelect();
		return;
	} 
	//是否是方法的参数关联关系选择
	if(e.data.parent_key &amp;&amp; e.data.parent_key === '10') {
		methodParamObj.isMethodChooseParam = true;
		methodParamObj.targetCode = e.data.targetCode; 
		return;
	}
	//是否是下载模板
	if(e.data.parent_key &amp;&amp; e.data.parent_key === '6') {
		downloadTem();
		return;
	}
	//是否是打开模板之后，传递关联关系
	if(e.data.parent_key &amp;&amp; e.data.parent_key === '8') {
		relateList = e.data.relate_list_all;	//在iframe中存放已存在的关联关系
		updateRStyle(e.data.relate_list_all);
		return;
	}
	//空格配置选择参数
	if (e.data.parent_key &amp;&amp; e.data.parent_key === '3') {
		if(e.data.isSelected  &amp;&amp; e.data.parentId) {
			selectParams.parentId = e.data.parentId;
			selectParams.targetItem = e.data.item;
			for (var i in allInputs) {
				allInputs[i].disabled = false;
			}
	    } else {
			selectParams.parentId = '';
			selectParams.targetItem = '';
		}
	}
	
	//取消某一参数关联
	if(e.data.parent_key &amp;&amp; e.data.parent_key === '9') {
		//从模板中清除此数据
		if(e.data.firstParam != '') {
			//设为可用
			var againInput = document.getElementById(e.data.firstParam);
			againInput.className = 'text-not-edit';
			return;
		}
	}
	
	//配置完成，取消input的disabled
	var allInputs = document.getElementsByTagName('input');
	
	//id存在则先存放起来
	if(e.data &amp;&amp; e.data.id) {
		config_input_id = e.data.id;
	}
	if(e.data.status) {
		//检测是否是有关联关系的空格(parent)，调用style更新func	
		if(!e.data.isSelected &amp;&amp; relateList &amp;&amp; relateList.length) {
			for(var i in relateList) {
				if(relateList[i].input_id == e.data.id) {
					updateAfter(beforeCfgRelate);
				}
			}
		}
		
		for (var i in allInputs) {
			if(allInputs[i].id === e.data.id) {
				if(!e.data.isSelected) {
					allInputs[i].className='text-complete';
				}
				allInputs[i].disabled = false;
			} else {
				allInputs[i].disabled = false;
			}
		} 
	} else {	//取消配置，取消input的disabled
		if(relateList &amp;&amp; relateList.length) {
			for(var i in relateList) {
				if(relateList[i].input_id == e.data.id) {
					updateAfter(beforeCfgRelate);
				}
			}
		}
		for (var i in allInputs) {
			if(allInputs[i].id === e.data.id) {
				allInputs[i].className='text-not-edit';
      allInputs[i].disabled = false;
      } else {
      allInputs[i].disabled = false;
      }
      }
      }
      //保存模板的空格关系，关联关系初始化
      if(e.data.status  &amp;&amp; e.data.relate_list) { 	//点击保存时的处理，有参数时处理参数
		relateList.push(e.data.relate_list);
	} 
	if(e.data.relate_list_all) {	//初级加载iframe时
		relateList = e.data.relate_list_all;	//在iframe中存放已存在的关联关系
	}
}"/>
    <add key="jsFuncion3" value="function updataStyleFirst(list) {
	var allInputs = document.getElementsByTagName('input');
	for(var i of allInputs) {
		for(var j in list) {
			if(i.id == list[j]) {
				i.className = 'text-complete';
				break;
			} 
			i.className = 'text-not-edit';
		}
		
	}
}"/>
    <add key="jsFuncion7" value="function conClick_f(obj){
	//方法的关联关系选择时，只考虑双击事件
	let event = obj || event;

	if(isMethodParam || methodParamObj.isMethodChooseParam) {
		return;
	}
	//此模板是否被嵌套
	if(window.self === window.top) {
		return;
	}
	//判断是否是选择参数的双击事件&amp;&amp;不是方法配置中配置关联
	if(selectParams.parentId === '' &amp;&amp; parent_key != '5') {
		//取消上次延时未执行的方法
		clearTimeout(timer);
		//设置延时300ms
		timer = setTimeout(function() {
			//在此写单击事件要执行的代码
			openFocus(obj);
		}, 300);
	}
}"/>
    <add key="jsFuncion8" value="function ondblclick_f(obj) {
	//此模板是否被嵌套
	if(window.self === window.top){
		return;
	}
	//方法配置关联关系时
	if(isMethodParam || methodParamObj.isMethodChooseParam) {
		methodChoose(obj);
		return;
	}
	//取消上次延时未执行的方法
	clearTimeout(timer);
	//下面写双击事件要执行的代码
	//判断是否是选择参数的双击事件
	if (selectParams.parentId !== '') {
		getInputId(obj);
	} 
}"/>
    <add key="jsFuncion9" value="function openFocus(obj) {
	var allInputs = document.getElementsByTagName('input');
	//需要给父页面传递关联关系并且更新有关联的input样式
	var relateObj = [];
	for(var i in relateList) {
		if(relateList[i].input_id == obj.id) {
			relateObj = relateList[i].relate_input;
		}
	}
	updateRStyle(relateObj);
	
	for (var i in allInputs) {
		if(allInputs[i].id === obj.id) {
			allInputs[i].className='text-editing';
			allInputs[i].disabled = true;
		} else {
			allInputs[i].disabled = true;
		}
	}
	
	var input_obj = document.getElementById(obj.id);
	var hasConfig = false;
	//7、打开空格，获取空格信息
	//发送之前判断是否是选择参数的功能
	var input_params = {
		id: obj.id,
		child_key: '7',
		status: hasConfig, //boolean
		hasSelectParam: false	//不是传递参数
	};
	var targetOrigin='*';
	//向父页面发送消息
	window.parent.postMessage(input_params,targetOrigin); 
}"/>
    <add key="jsFuncion6" value="function getInputId(obj) {
	var input_obj = document.getElementById(obj.id);
	//点击他本身或者已经配置了关联关系的input
	if(config_input_id == obj.id || input_obj.className === 'text-related') {
		return;
	}
	//保存被双击的元素class
	var click_obj = {
		relate_input: []
	}
	
	//设置flag，遍历关联表，是否已存在id关联
	var flag =false;
	//检测parent是否已存在关联
	for(var i in relateList) {
		if(relateList[i].input_id == config_input_id) {	//正在配置的input存在关联，但是不确定是否跟双击的空格存在关联
			if(!(relateList[i]['relate_input'].indexOf(obj.id) &gt;= 0))
      {
        //没有关联关系
				relateList[i]['relate_input'].push(obj.id);
			}
			flag = true;
		} 
	}
	if (!flag) {
		click_obj.input_id = config_input_id;
		click_obj.relate_input.push(obj.id);
		relateList.push(click_obj);
	}
	var dbclick_obj = {
		beforeCfg_id: obj.id,
		className: input_obj.className
	}
	beforeCfgRelate.push(dbclick_obj);
	input_obj.className ='text-related';
	
	//发送之前判断是否是选择参数的功能
	var input_params = {
		id: obj.id,
		child_key: '3',
		hasSelectParam: true,
		item: selectParams.targetItem
	};
	var targetOrigin='*';
	//向父页面发送消息
	window.parent.postMessage(input_params,targetOrigin); 
	//发送消息成功之后，清除选择参数的标识,并且input设置disabled为true
	selectParams.parentId = '';
	selectParams.targetItem = '';
	//清空关联关系表，打开空格时再获取
	relateList = [];
	var allInputs = document.getElementsByTagName('input');
	for(var i in allInputs) {
		allInputs[i].disabled = true;
	}
}"/>
    <add key="jsFuncion10" value="function methodChoose(obj) {
	var key = '';
	var input  = {};
	if(isMethodParam) {
		key = '5';
		input_params = {
			id: obj.id,
			child_key: key
		};
	} else if (methodParamObj.isMethodChooseParam) {
		key = '10';
		input_params = {
			id: obj.id,
			child_key: key,
			targetCode: methodParamObj.targetCode
		};
	}
	var targetOrigin = '*';
	//向父页面发送消息
	window.parent.postMessage(input_params, targetOrigin);
	//重置判断参数
	if(isMethodParam) {
		isMethodParam = false;
	} else {
		methodParamObj = {
			isMethodChooseParam: false,
			targetCode: ''
		};
	}
}"/>
    <add key="jsFunction11" value="function updateRStyle(list) {
	if(list &amp;&amp; list.length !== 0) {
		var obj = {};
		var objList = [];
		var allInputs = document.getElementsByTagName('input');
		
		for (var i in allInputs) {
			for(var j in list) {
				if(allInputs[i].id === list[j]) {
					obj = {
						beforeCfg_id: list[j],
						className: allInputs[i].className
					}
					objList.push(obj);
					//存放打开配置前的样式
					
					beforeCfgRelate = objList;
					allInputs[i].className = 'text-related';
				}
			}
		}
	}
}"/>
    <add key="jsFunction12" value="function updateAfter(list) {
	if(list &amp;&amp; list.length !== 0) {
		var allInputs = document.getElementsByTagName('input');
		for (var i in allInputs) {
			for(var j in list) {
				if(allInputs[i].id === list[j].beforeCfg_id) {
				//关闭配置，将R清除
					allInputs[i].className = list[j].className;
				}
			}
		}
	}
}"/>
    <add key="jsFunction13" value="function funDownload(content, filename) {
    // 创建隐藏的可下载链接
    var eleLink = document.createElement('a');
    eleLink.download = filename;
    eleLink.style.display = 'none';
    // 字符内容转变成blob地址
    var blob = new Blob([content]);
    eleLink.href = URL.createObjectURL(blob);
    // 触发点击
    document.body.appendChild(eleLink);
    eleLink.click();
    // 然后移除
    document.body.removeChild(eleLink);
};"/>
    <add key="jsFunction14" value="function clearValue() {
	var allInputs = document.getElementsByTagName('input');
	for (var i in allInputs) {
		//清空
		allInputs[i].value = '';
		allInputs[i].defaultValue = '';
		allInputs[i].disabled = false;
		allInputs[i].readOnly = false;
	}
}"/>
    <add key="jsFunction15" value="function downloadTem() {
	//导出之前先清空input的value值
	clearValue();
	//无法导出图片，方案不可用
	var temContent=document.getElementsByTagName('html')[0].innerHTML; 
	funDownload(temContent, 'test.html');
}"/>
    <add key="jsFunction16" value="function methodParamSelect() {
	var allInputs = document.getElementsByTagName('input');
	for (var i in allInputs) {
		//初次进入
		allInputs[i].disabled = true;
	}
}"/>
    <add key="css1" value="input.text-not-edit {background-image:none;}"/>
    <add key="underLineRepalceType" value="text"/>
    <!--表示下划线替换的input类型-->
    <add key="underLineRepalceStyle" value="&quot;border:0px;border-bottom-width:1px;border-bottom-style:inset;color:blue;&quot;"/>
    <!--表示下划线替换的input样式-->
    <add key="tableSpaceCellRepalceType" value="text"/>
    <add key="tableSpaceCellRepalceStyle" value="&quot;border:0px;width:100%; height:100%;color:blue;&quot;"/>
    <add key="checkboxReplaceType" value="checkbox"/>
    <add key="checkboxReplaceStyle" value="&quot;&quot;"/>
    <add key="ClientSettingsProvider.ServiceUri" value=""/>
  </appSettings>
</configuration>