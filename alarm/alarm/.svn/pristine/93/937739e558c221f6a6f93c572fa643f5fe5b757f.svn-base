package cn.wslint.alarm.alarmClient;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * 创建队列类 @Author: rzg @Date: 2018/11/27 15:35
 */
public class LinkQueue<T> {

  int max = 5;
  Lock lock = new ReentrantLock();
  Condition full = lock.newCondition();
  Condition empty = lock.newCondition();

  // 队头
  private Node<T> front;
  // 队尾
  private Node<T> rear;
  // 元素个数
  private int size;

  /**
   * 创建队列
   */
  public LinkQueue() {
    rear = front = null;
  }

  /**
   * 入队列
   */
  public void enQueue(T data) {
    Node<T> node = new Node<T>(data);
    if (isEmputy()) {
      front = rear = node;
    } else {
      rear.setNext(node);
      rear = node;
    }
    size++;
  }

  /**
   * 出队列
   *
   * @return 返回数据
   */
  public T deQueue() {
    if (isEmputy()) {
      throw new RuntimeException("队列为空");
    }

    Node<T> delete = front;
    front = delete.getNext();
    delete.setNext(null); // help GC
    size--;

    if (size == 0) {
      // 删除掉最后一个元素时，front值已经为null，但rear还是指向该节点，需要将rear置为null
      // 最后一个结点front和rear两个引用都没指向它，帮助GC处理该节点对象
      rear = front;
    }

    return (T) delete.getData();
  }

  /**
   * 判断队列是否为空
   */
  public boolean isEmputy() {
    return (front == null && rear == null) ? true : false;
  }

  /**
   * 获取队列的元素个数
   */
  public int size() {
    return this.size;
  }
}
