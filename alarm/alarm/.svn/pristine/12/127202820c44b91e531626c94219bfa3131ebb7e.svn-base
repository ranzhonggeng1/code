package cn.wslint.alarm.alarmClient;

import cn.wslint.alarm.resources.AlarmResource;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

/**
 * agent代理，线程检测队列 @Author: rzg @Date: 2018/11/27 15:59
 */
public class AlarmAgent implements Runnable {

  AlarmClientSocket alarmClientSocket;
  Socket socket;
  private Integer count = 0;
  BlockingQueue<String> alarmQueue = new LinkedBlockingQueue<String>(); // 存放告警队列

  public AlarmAgent(Socket socket) {
    this.socket = socket;
  }

  @Override
  public void run() {
    System.out.println("线程启动：");
    while (true) { // 线程未中断执行循环
      System.out.println("第{}执行：" + count++);
      try {
        System.out.println("开始检查队列：");
        // 存放告警队列
        System.out.println("队列信息：" + alarmQueue.size());
        if (alarmQueue.size() > 0) {
          sendMsg(alarmQueue);
        }
        Thread.sleep(2000); // 每隔2000ms执行一次

      } catch (InterruptedException e) {

        e.printStackTrace();
      }
    }
  }

  /**
   * 队列不为空，发送告警
   */
  public Boolean sendMsg(BlockingQueue<String> alarmQueue) {
    System.out.println("队列长度：" + alarmQueue.size());
    if (alarmQueue.size() > 0) {
      try {
        return !Send(socket, alarmQueue.take());
      } catch (InterruptedException e) {
        e.printStackTrace();
        return false;
      }
    } else {
      return false;
    }
  }

  /**
   * 发送数据，发送失败返回false,发送成功返回true
   */
  public Boolean Send(Socket csocket, String message) {
    try {
      System.out.println("准备发送:" + alarmQueue.size());
      PrintWriter out = new PrintWriter(csocket.getOutputStream(), true);
      out.println(message);
      return true;
    } catch (Exception se) {
      se.printStackTrace();
      return false;
    }
  }

  /**
   * 设置队列
   */
  public void setQueue(AlarmResource alarmResource) {
    try {
      alarmQueue.put(alarmResource.toString());
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
  }

  public BlockingQueue<String> getAlarmQueue() {
    return alarmQueue;
  }

  public void setAlarmQueue(BlockingQueue<String> alarmQueue) {
    this.alarmQueue = alarmQueue;
  }
}
