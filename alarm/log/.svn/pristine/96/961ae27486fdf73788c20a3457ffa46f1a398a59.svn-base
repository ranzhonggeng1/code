package cn.wslint.log.optlogClient;

import cn.wslint.log.resources.OptlogAddResource;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

/**
 * socket长连接类 @Author: rzg @Date: 2018/11/27 13:47
 */
public class OptlogClientSocket implements Runnable {

  public String ip = null; // 连接服务器的IP
  public Integer port = null; // 连接服务器的端口
  BlockingQueue<String> alarmQueue = new LinkedBlockingQueue<String>(); // 存放告警队列
  private Socket socket = null; // 套节字对象
  private OutputStream os = null;
  private InputStream is = null;
  private boolean close = false; // 关闭连接标志位，true表示关闭，false表示连接
  private Integer sotimeout = 1 * 1 * 10; // 超时时间，以毫秒为单位
  OptlogAgent optlogAgent;

  // 初始化函数

  public OptlogClientSocket(String ip, Integer port) {
    setIp(ip);
    setPort(port);
    init();
  }

  public void init() {
    try {
      InetAddress address = InetAddress.getByName(getIp());
      socket = new Socket(address, getPort());
      socket.setKeepAlive(true); // 开启保持活动状态的套接字
      socket.setSoTimeout(sotimeout); // 设置超时时间
      System.out.println("初始化客户端socket完成：");
      optlogAgent = new OptlogAgent(socket);
      Thread thread = new Thread(optlogAgent);
      thread.start();
    } catch (UnknownHostException e) {
      e.printStackTrace();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  /**
   * 单独的线程监控告警队列
   */
  @Override
  public void run() {
    long startTime = System.currentTimeMillis();
    sendHeartbeat();
    while (true) {
      try {
        if (socket == null || socket.isClosed()) {
          System.out.println("重新建立连接：" + getIp() + ":" + getPort());
          InetAddress address = InetAddress.getByName(getIp());
          socket = new Socket(address, getPort());
          os = socket.getOutputStream();
        }
        Thread.sleep(100);
        System.out.println("开始检查队列：");
        //        sendMsg();
        is = socket.getInputStream();
        int size = is.available();
        if (size <= 0) {
          if ((System.currentTimeMillis() - startTime)
              > 3 * 10 * 1000) { // 如果超过30秒没有收到服务器发回来的信息，说明socket连接可能已经被远程服务器关闭
            socket.close(); // 这时候可以关闭socket连接
            startTime = System.currentTimeMillis();
          }
          continue;
        } else {
          startTime = System.currentTimeMillis();
        }
        byte[] resp = new byte[size];
        is.read(resp);
        String response = new String(resp, "utf-8");
        System.out.println(response);
      } catch (Exception e) {
        e.printStackTrace();
        try {
          socket.close();
          is.close();
          os.close();
        } catch (IOException e1) {
          e1.printStackTrace();
        }
      }
    }
  }

  /**
   * 发送心跳包
   */
  public void sendHeartbeat() {
    try {
      final String heartbeat = "heart:00001;";
      new Thread(
          new Runnable() {
            @Override
            public void run() {
              while (true) {
                try {
                  Thread.sleep(10 * 1000); // 10s发送一次心跳
                  os.write(heartbeat.getBytes());
                  os.flush();
                } catch (Exception e) {
                  e.printStackTrace();
                }
              }
            }
          })
          .start();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * 存储队列
   */
  public void addLog(OptlogAddResource optlogAddResource) {
    // 队列存放
    System.out.println("存储optlog:" + optlogAddResource.toString());
    optlogAgent.setQueue(optlogAddResource);
  }

  /**
   * 读取数据，返回字符串类型
   */
  public String ReadText(Socket csocket) {
    try {
      csocket.setSoTimeout(sotimeout);
      InputStream input = csocket.getInputStream();
      BufferedReader in = new BufferedReader(new InputStreamReader(input));
      char[] sn = new char[1000];
      in.read(sn);
      String sc = new String(sn);
      return sc;
    } catch (IOException se) {
      return null;
    }
  }

  /**
   * 判断是否断开连接，断开返回true,没有返回false
   */
  public Boolean isServerClose(Socket socket) {
    try {
      socket.sendUrgentData(0); // 发送1个字节的紧急数据，默认情况下，服务器端没有开启紧急数据处理，不影响正常通信
      return false;
    } catch (Exception se) {
      return true;
    }
  }

  public Socket getSocket() {
    return socket;
  }

  public boolean getClose() {
    return close;
  }

  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }

  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }
}
